"""Class to analyze the pip advisory database."""

import os
import subprocess
from datetime import datetime

from yaml import safe_load

from pip_security_worker import settings
from pip_security_worker.models.advisory import Advisory
from pip_security_worker.settings import PIP_ADVISORY_DB_URL


class PIPAdvisory(object):
    """Class to analyze the pip advisory database."""

    __slots__ = ('_last_updated', '_fetched')

    def __init__(self) -> None:
        """Initialize the class."""
        self._last_updated: datetime | None = None
        self._fetched: bool = False

    @property
    def last_updated(self) -> datetime:
        """
        Property for the last update datetime of the advisory database.

        This returns the last update datetime if it exists, otherwise datetime representing now. Now should only
        be returned if a context manager has not been created.

        Returns:
            last update as a datetime if exists, otherwise datetime representing now.
        """
        self._fetch_repository()
        return self._last_updated or datetime.now()

    def _fetch_repository(self) -> None:
        """Fetch the repository."""
        if self._fetched:
            # Repository has already been fetched, we don't need to fetch it again.
            return

        subprocess.run(['rm', '-rf', settings.GIT_STORAGE])
        subprocess.run(['git', 'clone', PIP_ADVISORY_DB_URL, settings.GIT_STORAGE])
        updated = subprocess.run(
            ['git', f'--git-dir={settings.GIT_STORAGE}.git/', '--no-pager', 'log', '-1', '--format="%ai"'],
            capture_output=True,
        )
        self._last_updated = datetime.strptime(
            updated.stdout.decode('utf-8').strip().strip('"'), '%Y-%m-%d %H:%M:%S %z'
        )
        self._fetched = True

    def __enter__(self):
        """Enter the context manager."""
        self._fetch_repository()
        return self

    def __exit__(self, exc_type, exc_val, exc_tb) -> None:
        """Exit the context manager."""
        subprocess.run(['rm', '-rf', settings.GIT_STORAGE])
        self._fetched = False

    # def __iter__(self):
    #    """Return the iterator object."""
    #    return self

    @staticmethod
    def _process_advisory(advisory_file: str) -> list[Advisory]:
        """Process the advisory."""
        advisories = []
        with open(advisory_file, 'r') as fh:
            advisory_data = fh.read()
            advisory_dict = safe_load(advisory_data)

            references: dict[str, str] = {
                reference['type']: reference['url'] for reference in advisory_dict.get('references', {})
            }
            for item in range(len(advisory_dict['affected'])):
                security_type: str | None = None
                severity_score: str | None = None

                if len(advisory_dict.get('severity', [])) > 0:
                    security_type = advisory_dict['severity'][0]['type']
                    severity_score = advisory_dict['severity'][0]['score']

                affected_versions = []
                if 'versions' in advisory_dict['affected'][item]:
                    affected_versions = list(advisory_dict['affected'][item]['versions'])

                advisories.append(
                    Advisory(
                        name=advisory_dict['affected'][item]['package']['name'],
                        url=advisory_dict['affected'][item]['package'].get('purl', None),
                        versions=affected_versions,
                        security_type=security_type,
                        severity_score=severity_score,
                        description=advisory_dict['details'],
                        published=advisory_dict.get('published', advisory_dict.get('modified')),
                        advisory_id=advisory_dict.get('id', 'UNKNOWN'),
                        references=references,
                        raw=advisory_data,
                    )
                )
        return advisories

    def test(self):
        """Return the next advisory."""
        vulns_path = f'{settings.GIT_STORAGE}vulns'
        folders = os.listdir(vulns_path)
        for folder in folders:
            if folder.startswith('.'):
                continue
            folder_path = os.path.join(vulns_path, folder)
            files = os.listdir(folder_path)
            for file in files:
                if file.startswith('.'):
                    continue
                yield from self._process_advisory(advisory_file=os.path.join(folder_path, file))
        # raise StopIteration
